/**
 * This is the base class for an exporter. This class is supposed to be extended to allow
 * data export to various formats.
 *
 * The purpose is to have more exporters that can take the same {@link #data data set} and export it to different
 * formats.
 *
 * Exporters are used by {@link Ext.grid.plugin.Exporter grid Exporter plugin} and {@link Ext.pivot.plugin.Exporter pivot Exporter plugin}
 * but could also be used individually when needed.
 */
Ext.define('Ext.exporter.Base', {
    mixins: [
        'Ext.mixin.Factoryable'
    ],

    alias:  'exporter.base',

    requires: [
        'Ext.exporter.data.Table',
        'Ext.exporter.file.Style',
        'Ext.exporter.File',
        'Ext.Promise'
    ],

    config: {
        /**
         * @cfg {Ext.exporter.data.Table} data (required)
         *
         * Data to be consumed by the exporter.
         *
         */
        data:           null,
        /**
         * @cfg {Boolean} [showSummary=true]
         *
         * Should group summaries be shown? The data this exporter can consume
         * may contain group summaries.
         */
        showSummary:    true,
        /**
         * @cfg {String} [title=""]
         *
         * Title displayed above the table. Hidden when empty
         */
        title:          null,
        /**
         * @cfg {String} [author="Sencha"]
         *
         * The author that generated the file.
         */
        author:         'Sencha',

        /**
         * @cfg {String} [fileName="export.txt"]
         *
         * Name of the saved file
         */
        fileName:       'export.txt',

        /**
         * @cfg {String} [charset="UTF-8"]
         *
         * File's charset
         */
        charset:        'UTF-8'
    },

    constructor: function(config){
        this.initConfig(config || {});
        return this.callParent(arguments);
    },

    destroy: function(){
        this.setData(Ext.destroy(this.getData()));
        this.callParent();
    },

    /**
     * @method
     * Generates the file content.
     */
    getContent: Ext.identityFn,

    /**
     * Save the file on user's machine using the content generated by this exporter.
     *
     * @return {Ext.Promise}
     */
    saveAs: function(){
        var me = this;

        return new Ext.Promise(function (resolve, reject) {
            Ext.asap(me.delayedSave, me, [resolve, reject]);
        });
    },

    delayedSave: function(resolve) {
        Ext.exporter.File.saveAs(this.getContent(), this.getFileName(), this.getCharset());
        resolve();
    },

    /**
     * Returns the number of columns available in the provided `columns` array.
     * It will parse the whole tree structure to count the bottom level columns too.
     *
     * @param columns
     * @return {Number}
     */
    getColumnCount: function(columns){
        var s = 0;

        if (!columns) {
            return s;
        }

        for (var i = 0; i < columns.length; i++) {
            if (!columns[i].columns) {
                s += 1;
            } else {
                s += this.getColumnCount(columns[i].columns);
            }
        }

        return s;
    },

    applyData: function(data){
        if(!data || data.isDataTable){
            return data;
        }

        return new Ext.exporter.data.Table(data);
    }

});